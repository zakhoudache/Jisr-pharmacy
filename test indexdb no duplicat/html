const addButton = document.getElementById("addButton");
let dbName = "myDatabase";
let objectStoreName = "images";
let request = window.indexedDB.open(dbName, 1);

request.onupgradeneeded = function(event) {
  let db = event.target.result;
  let objectStore = db.createObjectStore(objectStoreName, { autoIncrement: true });
};

request.onerror = function() {
  console.log("Error opening the database");
};

request.onsuccess = function(event) {
  let db = event.target.result;

  // Load data from text files and add to IndexedDB
  loadTextFile(db, objectStoreName);

  // Display existing data in the table
  let transaction = db.transaction(objectStoreName, "readonly");
  let objectStore = transaction.objectStore(objectStoreName);
  let request = objectStore.getAll();

  request.onsuccess = function(event) {
    let data = event.target.result;
    let addedRows = new Set(); // keep track of added rows to avoid duplicates

    let tableBody = document.getElementById("myTable").getElementsByTagName("tbody")[0];

    for (let i = 0; i < data.length; i++) {
      let row = createTableRow(data[i]);

      // check if the row has already been added
      if (!addedRows.has(row.innerHTML)) {
        tableBody.appendChild(row);
        addedRows.add(row.innerHTML);
      }
    }
  };
};

function createTableRow(image) {
  let filenameC = image.filenameC;
  let filenameO = image.filenameO;
  let imageOrder = image.imageOrder;

  let row = document.createElement("tr");

  let filenameCCell = document.createElement("td");
  filenameCCell.textContent = filenameC;
  row.appendChild(filenameCCell);

  let filenameOCell = document.createElement("td");
  filenameOCell.textContent = filenameO;
  row.appendChild(filenameOCell);

  let imageOrderCell = document.createElement("td");
  imageOrderCell.textContent = imageOrder;
  row.appendChild(imageOrderCell);

  return row;
}

function addData(filenameC, filenameO, imageOrder, db, storeName) {
  let newData = { filenameC, filenameO, imageOrder };
  addObjectStoreData(db, storeName, newData);
  let row = createTableRow(newData);
  let tableBody = document.getElementById("myTable").getElementsByTagName("tbody")[0];

  // check if the row has already been added
  if (!addedRows.has(row.innerHTML)) {
    tableBody.appendChild(row);
    addedRows.add(row.innerHTML);
  }
}

function addObjectStoreData(db, storeName, data) {
  const transaction = db.transaction(storeName, 'readwrite');
  const objectStore = transaction.objectStore(storeName);
  const request = objectStore.add(data);
  request.onerror = (event) => {
    console.log('Error adding data', event.target.error);
  };
  request.onsuccess = (event) => {
    console.log('Data added successfully');
  };
}
function loadTextFile(db, storeName) {
    const transaction = db.transaction(storeName, 'readwrite');
    const objectStore = transaction.objectStore(storeName);
  
    Promise.all([
      fetch('ListFilename.txt').then(response => response.text()),
      fetch('ListFilenameOrdonnance.txt').then(response => response.text())
    ]).then(([filenameCContents, filenameOContents]) => {
      const filenameCArray = filenameCContents.split('\n').filter(filename => filename.trim() !== '');
      const filenameOArray = filenameOContents.split('\n').filter(filename => filename.trim() !== '');
  
      const getRequest = objectStore.getAll();
  
      getRequest.onsuccess = function(event) {
        const existingData = event.target.result;
  
        const newDataArray = [];
  
        for (let i = 0; i < filenameCArray.length; i++) {
          const filenameC = filenameCArray[i];
          const filenameO = filenameOArray[i];
          const existingItem = existingData.find(item => item.filenameC === filenameC);
  
          if (!existingItem) {
            const newData = { filenameC, filenameO };
            newDataArray.push(newData);
            addObjectStoreData(db, storeName, newData);
          }
        }
  
        const tableBody = document.getElementById("myTable").getElementsByTagName("tbody")[0];
  
        newDataArray.forEach(newData => {
          const row = createTableRow(newData);
          tableBody.appendChild(row);
        });
      };
  
    }).catch(error => {
      console.error('Error loading text files', error);
    });
  }
  